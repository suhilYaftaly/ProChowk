datasource db {
    provider = "mongodb"
    url      = env("MONGODB_URI")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            String     @id @default(auto()) @map("_id") @db.ObjectId
    name          String
    email         String     @unique
    emailVerified Boolean    @default(false)
    password      String?
    phoneNum      String?
    bio           String?
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt
    provider      Provider   @default(Credentials)
    roles         Role[]     @default([user])
    userTypes     UserType[]

    image UserImage?

    addressId                String?                   @db.ObjectId
    address                  Address?                  @relation(fields: [addressId], references: [id])
    contractor               Contractor?
    jobs                     Job[]
    refreshToken             RefreshToken[]
    notifications            Notification[]
    writtenReviews           Review[]                  @relation("reviewedBy")
    receivedReviews          Review[]                  @relation("reviewsAbout")
    reviewAuthsGiven         ReviewAuthorization[]     @relation("reviewAuthBy")
    reviewAuthsReceived      ReviewAuthorization[]     @relation("reviewAuthTo")
    conversationParticipants ConversationParticipant[]
    messages                 Message[]
}

model RefreshToken {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    token     String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    expiresAt DateTime
    userAgent String
    userId    String   @db.ObjectId
    user      User?    @relation(fields: [userId], references: [id])
}

model UserImage {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String?
    url       String   @unique
    type      String?
    size      Float?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    String   @unique @db.ObjectId
    user      User?    @relation(fields: [userId], references: [id])
}

model Address {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    displayName String
    street      String?
    city        String
    county      String
    state       String
    stateCode   String
    postalCode  String?
    country     String
    countryCode String
    lat         Float
    lng         Float
    geometry    Json
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    User        User[]
    Job         Job[]

    @@unique([lat, lng])
}

model Contractor {
    id         String                @id @default(auto()) @map("_id") @db.ObjectId
    createdAt  DateTime              @default(now())
    updatedAt  DateTime              @updatedAt
    userId     String                @unique @db.ObjectId
    user       User                  @relation(fields: [userId], references: [id])
    skillIDs   String[]              @db.ObjectId
    skills     Skill[]               @relation(fields: [skillIDs], references: [id])
    licenses   License[]
    bids       JobBid[]
    portfolios ContractorPortfolio[]
}

model License {
    id           String      @id @default(auto()) @map("_id") @db.ObjectId
    name         String?
    url          String      @unique
    type         String?
    size         Float?
    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt
    contractorId String      @db.ObjectId
    contractor   Contractor? @relation(fields: [contractorId], references: [id])
}

model Skill {
    id            String       @id @default(auto()) @map("_id") @db.ObjectId
    label         String       @unique
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
    contractorIDs String[]     @db.ObjectId
    contractors   Contractor[] @relation(fields: [contractorIDs], references: [id])
    jobIDs        String[]     @db.ObjectId
    jobs          Job[]        @relation(fields: [jobIDs], references: [id])
}

model Job {
    id          String     @id @default(auto()) @map("_id") @db.ObjectId
    title       String
    desc        String
    jobSize     JobSize
    status      JobStatus  @default(Open)
    startDate   DateTime?
    endDate     DateTime?
    isDraft     Boolean    @default(false)
    draftExpiry DateTime?
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    budgetId    String?    @db.ObjectId
    budget      Budget?
    images      JobImage[]
    userId      String     @unique @db.ObjectId
    user        User       @relation(fields: [userId], references: [id])
    addressId   String?    @db.ObjectId
    address     Address?   @relation(fields: [addressId], references: [id])
    skillIDs    String[]   @db.ObjectId
    skills      Skill[]    @relation(fields: [skillIDs], references: [id])
    bids        JobBid[]
}

model JobImage {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String?
    url       String   @unique
    type      String?
    size      Float?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    jobId     String   @unique @db.ObjectId
    job       Job?     @relation(fields: [jobId], references: [id])
}

model Budget {
    id        String     @id @default(auto()) @map("_id") @db.ObjectId
    type      BudgetType @default(Hourly)
    from      Float
    to        Float
    maxHours  Float
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    jobId     String     @unique @db.ObjectId
    job       Job        @relation(fields: [jobId], references: [id])
}

model JobBid {
    id                String       @id @default(auto()) @map("_id") @db.ObjectId
    quote             Float
    startDate         DateTime
    endDate           DateTime?
    proposal          String?
    agreementAccepted Boolean      @default(false)
    rejectionReason   String?
    rejectionDate     DateTime?
    status            JobBidStatus @default(Open)
    createdAt         DateTime     @default(now())
    updatedAt         DateTime     @updatedAt
    jobId             String       @db.ObjectId
    contractorId      String       @db.ObjectId
    job               Job          @relation(fields: [jobId], references: [id])
    contractor        Contractor   @relation(fields: [contractorId], references: [id])
}

model Log {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    timestamp DateTime  @default(now())
    level     LogsLevel
    message   String
    meta      Json?
}

model Notification {
    id        String           @id @default(auto()) @map("_id") @db.ObjectId
    title     String
    message   String?
    read      Boolean          @default(false)
    type      NotificationType
    readDate  DateTime?
    data      Json?
    createdAt DateTime         @default(now())
    updatedAt DateTime         @updatedAt
    userId    String           @db.ObjectId
    user      User             @relation(fields: [userId], references: [id])
}

model Review {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    rating     Int
    comment    String?
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    reviewerId String   @db.ObjectId
    reviewedId String   @db.ObjectId
    reviewer   User     @relation("reviewedBy", fields: [reviewerId], references: [id])
    reviewed   User     @relation("reviewsAbout", fields: [reviewedId], references: [id])
}

model ReviewAuthorization {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    description String?
    createdAt   DateTime @default(now())
    validUntil  DateTime @default(now())

    reviewerId String @db.ObjectId
    reviewer   User   @relation("reviewAuthBy", fields: [reviewerId], references: [id])

    reviewedId String @db.ObjectId
    reviewed   User   @relation("reviewAuthTo", fields: [reviewedId], references: [id])

    @@unique([reviewerId, reviewedId])
}

model ContractorPortfolio {
    id           String           @id @default(auto()) @map("_id") @db.ObjectId
    description  String
    createdAt    DateTime         @default(now())
    updatedAt    DateTime         @updatedAt
    contractorId String           @db.ObjectId
    contractor   Contractor       @relation(fields: [contractorId], references: [id])
    images       PortfolioImage[]
}

model PortfolioImage {
    id                    String              @id @default(auto()) @map("_id") @db.ObjectId
    name                  String?
    url                   String              @unique
    type                  String?
    size                  Float?
    createdAt             DateTime            @default(now())
    updatedAt             DateTime            @updatedAt
    contractorPortfolioId String              @db.ObjectId
    contractorPortfolio   ContractorPortfolio @relation(fields: [contractorPortfolioId], references: [id])
}

model Conversation {
    id           String                    @id @default(auto()) @map("_id") @db.ObjectId
    participants ConversationParticipant[]
    messages     Message[]
    createdAt    DateTime                  @default(now())
    updatedAt    DateTime                  @updatedAt
}

model ConversationParticipant {
    id                    String       @id @default(auto()) @map("_id") @db.ObjectId
    userId                String       @db.ObjectId
    user                  User         @relation(fields: [userId], references: [id])
    conversationId        String       @db.ObjectId
    conversation          Conversation @relation(fields: [conversationId], references: [id])
    hasSeenLatestMessages Boolean
    createdAt             DateTime     @default(now())
    updatedAt             DateTime     @updatedAt
}

model Message {
    id             String       @id @default(auto()) @map("_id") @db.ObjectId
    body           String
    conversationId String       @db.ObjectId
    conversation   Conversation @relation(fields: [conversationId], references: [id])
    senderId       String       @db.ObjectId
    sender         User         @relation(fields: [senderId], references: [id])
    imageId        String       @db.ObjectId
    image          Image?
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
}

model Image {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String?
    url       String   @unique
    type      String?
    size      Float?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    messageId String   @unique @db.ObjectId
    message   Message  @relation(fields: [messageId], references: [id])
}

enum BudgetType {
    Hourly
    Project
}

enum Role {
    user
    dev
    admin
    superAdmin
}

enum Provider {
    Google
    Credentials
}

enum UserType {
    client
    contractor
}

enum JobSize {
    Small
    Medium
    Large
}

enum LogsLevel {
    error
    warn
    info
    log
}

enum JobStatus {
    Open
    Bidding
    InProgress
    Completed
}

enum JobBidStatus {
    Open
    Accepted
    Completed
    Rejected
}

enum NotificationType {
    BidAccepted
    BidRejected
    BidPlaced
    BidCompleted
    JobFinished
    ReviewReceived
}
