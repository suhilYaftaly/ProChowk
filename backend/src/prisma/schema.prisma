datasource db {
    provider = "mongodb"
    url      = env("MONGODB_URI")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            String         @id @default(auto()) @map("_id") @db.ObjectId
    name          String
    email         String         @unique
    emailVerified Boolean        @default(false)
    password      String?
    phoneNum      String?
    bio           String?
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    provider      Provider       @default(Credentials)
    roles         Role[]         @default([user])
    userTypes     UserType[]
    image         UserImage?
    address       Address?       @relation(fields: [addressId], references: [id])
    addressId     String?        @db.ObjectId
    contractor    Contractor?
    jobs          Job[]
    refreshToken  RefreshToken[]
}

model RefreshToken {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    token     String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    expiresAt DateTime
    userAgent String
    userId    String   @db.ObjectId
    user      User?    @relation(fields: [userId], references: [id])
}

model UserImage {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String?
    url       String   @unique
    type      String?
    size      Float?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    String   @unique @db.ObjectId
    user      User?    @relation(fields: [userId], references: [id])
}

model Address {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    displayName String
    street      String
    city        String
    county      String
    state       String
    stateCode   String
    postalCode  String
    country     String
    countryCode String
    lat         Float
    lng         Float
    geometry    Json
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    User        User[]
    Job         Job[]

    @@unique([lat, lng])
}

model Contractor {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    userId    String    @unique @db.ObjectId
    user      User      @relation(fields: [userId], references: [id])
    skillIDs  String[]  @db.ObjectId
    skills    Skill[]   @relation(fields: [skillIDs], references: [id])
    licenses  License[]
}

model License {
    id           String      @id @default(auto()) @map("_id") @db.ObjectId
    name         String?
    url          String      @unique
    type         String?
    size         Float?
    desc         String
    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt
    contractorId String      @db.ObjectId
    contractor   Contractor? @relation(fields: [contractorId], references: [id])
}

model Skill {
    id            String       @id @default(auto()) @map("_id") @db.ObjectId
    label         String       @unique
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
    contractorIDs String[]     @db.ObjectId
    contractors   Contractor[] @relation(fields: [contractorIDs], references: [id])
    jobIDs        String[]     @db.ObjectId
    jobs          Job[]        @relation(fields: [jobIDs], references: [id])
}

model Job {
    id        String     @id @default(auto()) @map("_id") @db.ObjectId
    title     String
    desc      String
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    jobSize   JobSize
    budget    Budget?
    images    JobImage[]
    user      User       @relation(fields: [userId], references: [id])
    userId    String     @unique @db.ObjectId
    address   Address?   @relation(fields: [addressId], references: [id])
    addressId String?    @db.ObjectId
    skillIDs  String[]   @db.ObjectId
    skills    Skill[]    @relation(fields: [skillIDs], references: [id])
    budgetId  String?    @db.ObjectId
    materials String[]
    startDate DateTime?
    endDate   DateTime?
    isDraft   Boolean    @default(false)
}

model JobImage {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String?
    url       String   @unique
    type      String?
    size      Float?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    jobId     String   @unique @db.ObjectId
    job       Job?     @relation(fields: [jobId], references: [id])
}

model Budget {
    id        String     @id @default(auto()) @map("_id") @db.ObjectId
    type      BudgetType @default(Hourly)
    from      Float
    to        Float
    maxHours  Float
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    jobId     String     @unique @db.ObjectId
    job       Job        @relation(fields: [jobId], references: [id])
}

model Log {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    timestamp DateTime  @default(now())
    level     LogsLevel
    message   String
    meta      Json?
}

enum BudgetType {
    Hourly
    Project
}

enum Role {
    user
    dev
    admin
    superAdmin
}

enum Provider {
    Google
    Credentials
}

enum UserType {
    client
    contractor
}

enum JobSize {
    Small
    Medium
    Large
}

enum LogsLevel {
    error
    warn
    info
    log
}
